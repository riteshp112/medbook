{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Post from \"./Post\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar use = \"\";\nvar locUser = \"{}\";\n\nvar getlogloc = function getlogloc() {\n  var log;\n  return _regeneratorRuntime.async(function getlogloc$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"locuser\"));\n\n        case 3:\n          log = _context.sent;\n          if (log == null) log = \"false\";\n          return _context.abrupt(\"return\", log);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.debug(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar getlog = function getlog() {\n  return _regeneratorRuntime.async(function getlog$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getlogloc().then(function (data) {\n            return data;\n          }).then(function (value) {\n            value = JSON.parse(value);\n            use = value.username;\n            locUser = value;\n          }).catch(function (err) {\n            return console.log(err);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar logout = function logout(setc) {\n  return _regeneratorRuntime.async(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"locuser\", \"false\"));\n\n        case 2:\n          setc(_jsx(Post, {}));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar Profile = function Profile(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      profileVisible = _useState2[0],\n      setProfileVisible = _useState2[1];\n\n  return _jsxs(View, {\n    children: [_jsxs(View, {\n      children: [_jsx(View, {\n        style: {\n          marginTop: 5\n        }\n      }), _jsx(View, {\n        style: {\n          marginBottom: 5\n        },\n        children: _jsx(Button, {\n          title: \"My Profile\",\n          onPress: function onPress() {\n            return setProfileVisible(!profileVisible);\n          }\n        })\n      })]\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: profileVisible,\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: (styles.modalView, {\n            alignItems: \"flex-start\"\n          }),\n          children: [_jsxs(Text, {\n            style: {\n              fontSize: 20,\n              color: 'brown'\n            },\n            children: [\"Name: \", locUser1.name]\n          }), _jsxs(Text, {\n            style: {\n              fontSize: 20,\n              color: 'brown'\n            },\n            children: [\"Username: \", locUser1.username]\n          }), _jsxs(Text, {\n            style: {\n              fontSize: 20,\n              color: 'brown'\n            },\n            children: [\"Gender: \", locUser1.gender]\n          }), _jsxs(Text, {\n            style: {\n              fontSize: 20,\n              color: 'brown'\n            },\n            children: [\"DOB: \", locUser1.dob]\n          }), _jsx(View, {\n            children: _jsx(Pressable, {\n              style: [styles.button, styles.buttonClose],\n              onPress: function onPress() {\n                setProfileVisible(false);\n              },\n              children: _jsx(Text, {\n                style: styles.textStyle,\n                children: \" OK \"\n              })\n            })\n          })]\n        })\n      })\n    }), _jsx(Button, {\n      title: \"Logout\",\n      onPress: function onPress() {\n        logout(props.setc);\n      }\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    marginTop: 5,\n    marginLeft: 15\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\"\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});\nexport default Profile;","map":{"version":3,"sources":["/home/ritesh/medbook/medbook-client/medbook2/medbook/src/Screens/Profile.js"],"names":["useState","Post","AsyncStorage","use","locUser","getlogloc","getItem","log","console","debug","getlog","then","data","value","JSON","parse","username","catch","err","logout","setc","setItem","Profile","props","profileVisible","setProfileVisible","marginTop","marginBottom","styles","centeredView","modalView","alignItems","fontSize","color","locUser1","name","gender","dob","button","buttonClose","textStyle","StyleSheet","create","flex","justifyContent","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginLeft","buttonOpen","fontWeight","textAlign","modalText"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport {  Modal, StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"react-native\";\nimport { Dimensions } from \"react-native\";\nimport { Pressable } from \"react-native\";\nimport Post from \"./Post\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nvar use = \"\";\nlet locUser = \"{}\";\nconst getlogloc = async () => {\n  try {\n    var log = await AsyncStorage.getItem(\"locuser\");\n    if (log == null)\n     log = \"false\";\n    return log;\n  } catch (error) {\n    console.debug(error);\n  }\n};\nconst getlog = async () => {\n  await getlogloc()\n    .then(data => data)\n    .then(value => {\n      value=JSON.parse(value)\n      use = value.username;\n      locUser = value;\n    })\n    .catch(err => console.log(err));\n};\nconst logout = async setc => {\n  await AsyncStorage.setItem(\"locuser\", \"false\");\n  setc(<Post></Post>);\n};\nconst Profile = props => {\n  const [profileVisible, setProfileVisible] = useState(false);\n  return (\n    <View>\n      <View>\n        <View style={{ marginTop: 5 }}>\n        </View>\n        <View style={{ marginBottom: 5 }}>\n          <Button title=\"My Profile\" onPress={() => setProfileVisible(!profileVisible)}></Button>\n        </View>\n      </View>   \n      <Modal animationType=\"slide\" transparent={true} visible={profileVisible}>\n        <View style={styles.centeredView}>\n          <View style={(styles.modalView, { alignItems: \"flex-start\" })}>\n            <Text style={{ fontSize: 20, color: 'brown' }}>Name: {locUser1.name}</Text>\n            <Text style={{ fontSize: 20, color: 'brown' }}>Username: {locUser1.username}</Text>\n            <Text style={{ fontSize: 20, color: 'brown' }}>Gender: {locUser1.gender}</Text>\n            <Text style={{ fontSize: 20, color: 'brown' }}>DOB: {locUser1.dob}</Text>\n            <View>\n              <Pressable\n                style={[styles.button, styles.buttonClose]}\n                onPress={() => {\n                  setProfileVisible(false);\n                }}\n              >\n                <Text style={styles.textStyle}> OK </Text>\n              </Pressable>\n            </View>\n          </View>\n        </View>\n      </Modal>\n      <Button\n            title=\"Logout\"\n            onPress={() => {\n              logout(props.setc);\n            }}\n          ></Button>\n    </View>\n  );\n};\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    marginTop: 5,\n    marginLeft: 15\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\"\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});\nexport default Profile;"]},"metadata":{},"sourceType":"module"}