{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport PostItem from \"../Components/PostItem\";\nimport { fetchURL } from \"../config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar isCloseToBottom = function isCloseToBottom(_ref) {\n  var layoutMeasurement = _ref.layoutMeasurement,\n      contentOffset = _ref.contentOffset,\n      contentSize = _ref.contentSize;\n  var paddingToBottom = 20;\n  return layoutMeasurement.height + contentOffset.y >= contentSize.height - 50;\n};\n\nvar Post = function Post() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      PostItems = _useState2[0],\n      setPostItems = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var loadPost = function loadPost() {\n    var posts;\n    medFetch({\n      type: 'select',\n      table: 'post',\n      condition: {},\n      limit: \"\" + (PostItems.length + 5)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return posts = json.response;\n    });\n\n    if (posts.length > PostItems.length) {\n      for (var _iterator = _createForOfIteratorHelperLoose(posts), _step; !(_step = _iterator()).done;) {\n        var item = _step.value;\n        psts.push([_jsx(PostItem, {\n          item: item\n        }, item == null ? void 0 : item._id)]);\n      }\n    }\n\n    if (posts.length > PostItems.length) setPostItems(psts);\n    setModalVisible(false);\n  };\n\n  if (PostItems.length == 0) loadPost(setPostItems, setModalVisible, PostItems);\n  return _jsxs(ScrollView, {\n    onScroll: function onScroll(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (isCloseToBottom(nativeEvent)) {\n        loadPost(setPostItems, setModalVisible, PostItems);\n      }\n    },\n    style: {\n      flexGrow: 1\n    },\n    children: [PostItems, _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      style: {\n        position: \"absolute\"\n      },\n      children: _jsx(Text, {\n        style: {\n          margin: 20,\n          backgroundColor: \"white\",\n          borderRadius: 20,\n          padding: 35,\n          top: 200,\n          color: 'blue',\n          textAlign: 'center',\n          alignItems: \"center\",\n          shadowColor: \"#000\",\n          fontSize: 45,\n          shadowOffset: {\n            width: 0,\n            height: 2\n          }\n        },\n        children: \" Loading\"\n      })\n    })]\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["/home/ritesh/medbook/medbook-client/medbook2/medbook/src/Screens/Post.js"],"names":["useState","PostItem","fetchURL","isCloseToBottom","layoutMeasurement","contentOffset","contentSize","paddingToBottom","height","y","Post","PostItems","setPostItems","modalVisible","setModalVisible","loadPost","posts","medFetch","type","table","condition","limit","length","then","response","json","item","psts","push","_id","nativeEvent","flexGrow","position","margin","backgroundColor","borderRadius","padding","top","color","textAlign","alignItems","shadowColor","fontSize","shadowOffset","width"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { View, Modal, Text } from \"react-native\"\nimport { ScrollView } from \"react-native\";\n//import PostItem from \"./PostItem\"\nimport PostItem from \"../Components/PostItem\";\nimport { fetchURL } from \"../config\";\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\n  const paddingToBottom = 20;\n  return layoutMeasurement.height + contentOffset.y >=\n    contentSize.height - 50;\n};\nconst Post = () => {\n  const [PostItems, setPostItems] = useState([])\n  const [modalVisible, setModalVisible] = useState(true);\n  const loadPost = () => {\n    let posts;\n    medFetch({type:'select',table:'post',condition:{} ,limit: \"\" + (PostItems.length+5)}).then(response=>response.json()).then(json=>posts=json.response)\n      if (posts.length > PostItems.length)\n        for (let item of posts)     \n          psts.push([<PostItem key={item?._id} item={item}></PostItem>])\n  if (posts.length> PostItems.length)\n    setPostItems(psts)\n  setModalVisible(false)\n    }\n  \n  if (PostItems.length == 0)\n    loadPost(setPostItems, setModalVisible, PostItems);\n  return (\n    <ScrollView onScroll={({ nativeEvent }) => {\n      if (isCloseToBottom(nativeEvent)) {\n        loadPost(setPostItems, setModalVisible, PostItems)\n      }\n    }} style={{flexGrow:1}}>\n      {PostItems}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        style={{ position: \"absolute\" }}\n      >\n        <Text style={{\n          margin: 20,\n          backgroundColor: \"white\",\n          borderRadius: 20,\n          padding: 35,\n          top: 200,\n          color: 'blue',\n          textAlign: 'center',\n          alignItems: \"center\",\n          shadowColor: \"#000\",\n          fontSize: 45,\n          shadowOffset: {\n            width: 0,\n            height: 2\n          }\n        }}> Loading</Text>\n      </Modal>\n    </ScrollView>\n\n  )\n}\nexport default Post;"]},"metadata":{},"sourceType":"module"}