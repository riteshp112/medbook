{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { fetchURL } from \"../config\";\nimport Home from \"./Home\";\nimport medFetch from \"../Actions/fetch\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar userDetails = {};\n\nvar setlogloc = function setlogloc(userDetails) {\n  return _regeneratorRuntime.async(function setlogloc$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"locuser\", userDetails));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar Login = function Login(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      username = _useState4[0],\n      setUserName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var loginPressed = function loginPressed() {\n    var result;\n    medFetch({\n      type: 'select',\n      table: 'testcol',\n      condition: {\n        username: username,\n        password: password\n      },\n      limit: 1\n    }).then(function (data) {\n      return data.json();\n    }).then(function (json) {\n      result = json.response;\n      setModalVisible(false);\n      if (result.length == 0) alert(\"Invalid Username Or Password\");\n    });\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      onChangeText: function onChangeText(value) {\n        return setUserName(value);\n      },\n      placeholder: \"Username or Email\",\n      style: {\n        borderWidth: 2\n      }\n    }), _jsx(TextInput, {\n      onChangeText: function onChangeText(value) {\n        return setPassword(value);\n      },\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      style: {\n        borderWidth: 2,\n        marginTop: 2\n      }\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        alert(\"Send an e-mail at riteshp112@gmail.com to recover your account.\");\n      },\n      children: _jsx(Text, {\n        children: \" Forget Password?\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        props.signup(true);\n      },\n      children: _jsx(Text, {\n        children: \" Sign Up\"\n      })\n    }), _jsx(Button, {\n      title: \"Sign In\",\n      onPress: function onPress() {\n        setModalVisible(true);\n        loginPressed();\n      }\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      style: {},\n      children: _jsxs(Text, {\n        style: {\n          margin: 20,\n          backgroundColor: \"white\",\n          borderRadius: 20,\n          padding: 35,\n          top: 200,\n          color: \"blue\",\n          textAlign: \"center\",\n          alignItems: \"center\",\n          shadowColor: \"#000\",\n          fontSize: 45,\n          shadowOffset: {\n            width: 0,\n            height: 2\n          }\n        },\n        children: [\" \", \"Please Wait\", \" \"]\n      })\n    })]\n  });\n};\n\nexport { Login, userDetails };","map":{"version":3,"sources":["/home/ritesh/medbook/medbook-client/medbook2/medbook/src/Screens/Login.js"],"names":["useState","AsyncStorage","fetchURL","Home","medFetch","userDetails","setlogloc","setItem","Login","props","modalVisible","setModalVisible","username","setUserName","password","setPassword","loginPressed","result","type","table","condition","limit","then","data","json","response","length","alert","value","borderWidth","marginTop","signup","margin","backgroundColor","borderRadius","padding","top","color","textAlign","alignItems","shadowColor","fontSize","shadowOffset","width","height"],"mappings":"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","sourcesContent":["import { View, Image, TextInput, Text, Button, Modal } from \"react-native\";\nimport { useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { TouchableOpacity } from \"react-native\";\nimport { fetchURL } from \"../config\";\nimport Home from \"./Home\";\nimport medFetch from \"../Actions/fetch\";\nlet userDetails={};\nconst setlogloc = async userDetails => {\n  await AsyncStorage.setItem(\"locuser\", userDetails);\n};\nconst Login = props => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const loginPressed = () => {\n    let result;\n    medFetch({type:'select',table:'testcol',condition:{username, password },limit:1}).then(data=>data.json()).then(json=>{result=json.response  \n    setModalVisible(false)\n    if(result.length==0)\n      alert(\"Invalid Username Or Password\")\n      \n    })\n  };\n  return (\n    <View>\n      <TextInput\n        onChangeText={value => setUserName(value)}\n        placeholder={\"Username or Email\"}\n        style={{ borderWidth: 2 }}\n      ></TextInput>\n      <TextInput\n        onChangeText={value => setPassword(value)}\n        placeholder={\"Password\"}\n        secureTextEntry={true}\n        style={{ borderWidth: 2, marginTop: 2 }}\n      ></TextInput>\n      <TouchableOpacity\n        onPress={() => {\n          alert(\"Send an e-mail at riteshp112@gmail.com to recover your account.\");\n        }}\n      >\n        <Text> Forget Password?</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          props.signup(true);\n        }}\n      >\n        <Text> Sign Up</Text>\n      </TouchableOpacity>\n      <Button\n        title={\"Sign In\"}\n        onPress={() => {\n          setModalVisible(true);\n          loginPressed();\n        }}\n      ></Button>\n      <Modal animationType=\"slide\" transparent={true} visible={modalVisible} style={{}}>\n        <Text\n          style={{\n            margin: 20,\n            backgroundColor: \"white\",\n            borderRadius: 20,\n            padding: 35,\n            top: 200,\n            color: \"blue\",\n            textAlign: \"center\",\n            alignItems: \"center\",\n            shadowColor: \"#000\",\n            fontSize: 45,\n            shadowOffset: {\n              width: 0,\n              height: 2\n            }\n          }}\n        >\n          {\" \"}\n          Please Wait{\" \"}\n        </Text>\n      </Modal>\n    </View>\n  );\n};\nexport { Login, userDetails };\n"]},"metadata":{},"sourceType":"module"}