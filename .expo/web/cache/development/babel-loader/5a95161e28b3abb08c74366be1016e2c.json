{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { RecordItem } from \"../Components/RecordItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar donePressed = function donePressed(type, val) {\n  var recCount;\n  return _regeneratorRuntime.async(function donePressed$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"recCount\"));\n\n        case 2:\n          recCount = _context.sent;\n          if (recCount == null || recCount == undefined) recCount = 0;\n          recCount = parseInt(recCount);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"data\" + (recCount + 1), JSON.stringify({\n            type: type,\n            val: val,\n            date: new Date()\n          })));\n\n        case 7:\n          recCount += 1;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"recCount\", \"\" + recCount));\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar reloadRecords = function reloadRecords(records, setRecords) {\n  var recCount, temp1, i, temp;\n  return _regeneratorRuntime.async(function reloadRecords$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"recCount\"));\n\n        case 2:\n          recCount = _context2.sent;\n          if (recCount == null || recCount == undefined) recCount = 0;\n          recCount = parseInt(recCount);\n          temp1 = [];\n          i = 0;\n\n        case 7:\n          if (!(i < recCount)) {\n            _context2.next = 16;\n            break;\n          }\n\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"data\" + (i + 1)));\n\n        case 10:\n          temp = _context2.sent;\n          temp = JSON.parse(temp);\n          temp1.push([_jsx(RecordItem, {\n            type: temp.type,\n            val: temp.val,\n            date: temp.date\n          }, i)]);\n\n        case 13:\n          i++;\n          _context2.next = 7;\n          break;\n\n        case 16:\n          setRecords(temp1);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default (function () {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      type = _useState2[0],\n      setType = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      val = _useState4[0],\n      setVal = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      records = _useState8[0],\n      setRecords = _useState8[1];\n\n  return _jsxs(View, {\n    onLayout: function onLayout() {\n      return reloadRecords(records, setRecords);\n    },\n    style: {\n      flex: 1,\n      flexDirection: 'column'\n    },\n    children: [_jsxs(ScrollView, {\n      style: {\n        flex: 1\n      },\n      children: [records, _jsx(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: modalVisible,\n        children: _jsx(View, {\n          style: styles.centeredView,\n          children: _jsxs(View, {\n            style: styles.modalView,\n            children: [_jsxs(Picker, {\n              style: {\n                width: 250\n              },\n              onValueChange: function onValueChange(itemValue, itemIndex) {\n                return setType(itemValue);\n              },\n              children: [_jsx(Picker.Item, {\n                value: \"Choose Record Type\",\n                label: \"Choose Record Type\"\n              }), _jsx(Picker.Item, {\n                label: \"Glucoge Level\",\n                value: \"Glucoge Level\"\n              }), _jsx(Picker.Item, {\n                label: \"Blood Pressure\",\n                value: \"Blood Pressure\"\n              }), _jsx(Picker.Item, {\n                label: \"Temperature\",\n                value: \"Temperature\"\n              })]\n            }), _jsx(TextInput, {\n              style: {\n                borderWidth: 2,\n                width: 200\n              },\n              onChangeText: function onChangeText(value) {\n                return setVal(value);\n              }\n            }), _jsxs(View, {\n              style: {\n                flexDirection: 'row'\n              },\n              children: [_jsx(Pressable, {\n                style: [styles.button, styles.buttonClose],\n                onPress: function _callee() {\n                  return _regeneratorRuntime.async(function _callee$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _regeneratorRuntime.awrap(donePressed(type, val));\n\n                        case 2:\n                          reloadRecords(records, setRecords);\n                          setModalVisible(!modalVisible);\n\n                        case 4:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                },\n                children: _jsx(Text, {\n                  style: styles.textStyle,\n                  children: \"Done\"\n                })\n              }), _jsx(Pressable, {\n                style: [styles.button, styles.buttonClose],\n                onPress: function onPress() {\n                  setModalVisible(!modalVisible);\n                },\n                children: _jsx(Text, {\n                  style: styles.textStyle,\n                  children: \"Cancel\"\n                })\n              })]\n            })]\n          })\n        })\n      })]\n    }), _jsx(Button, {\n      title: \"Add New Record\",\n      onPress: function onPress() {\n        return setModalVisible(true);\n      }\n    })]\n  });\n});\nvar styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    marginTop: 5,\n    marginLeft: 15\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\"\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\"\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["/home/ritesh/medbook/medbook-client/medbook2/medbook/src/Screens/Record.js"],"names":["useState","AsyncStorage","RecordItem","donePressed","type","val","getItem","recCount","undefined","parseInt","setItem","JSON","stringify","date","Date","reloadRecords","records","setRecords","temp1","i","temp","parse","push","setType","setVal","modalVisible","setModalVisible","flex","flexDirection","styles","centeredView","modalView","width","itemValue","itemIndex","borderWidth","value","button","buttonClose","textStyle","StyleSheet","create","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","marginLeft","buttonOpen","color","fontWeight","textAlign","modalText","marginBottom"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport {  Button, Modal, Pressable, StyleSheet, Text, View } from 'react-native'\nimport { Picker } from 'react-native';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { TextInput } from 'react-native';\nimport { ScrollView } from 'react-native';\nimport { RecordItem } from '../Components/RecordItem';\nconst donePressed = async (type, val) => {\n  let recCount = await AsyncStorage.getItem(\"recCount\")\n  if (recCount == null || recCount == undefined)\n    recCount = 0\n  recCount = parseInt(recCount)\n  await AsyncStorage.setItem(\"data\" + (recCount + 1), JSON.stringify({ type, val, date: new Date() }))\n  recCount += 1;\n  await AsyncStorage.setItem(\"recCount\", \"\" + recCount)\n}\nconst reloadRecords = async (records, setRecords) => {\n  let recCount = await AsyncStorage.getItem(\"recCount\")\n  if (recCount == null || recCount == undefined)\n    recCount = 0\n  recCount = parseInt(recCount)\n  let temp1 = []\n  for (let i = 0; i < recCount; i++) {\n    let temp = await AsyncStorage.getItem(\"data\" + (i + 1));\n    temp = JSON.parse(temp)\n    temp1.push([<RecordItem key={i} type={temp.type} val={temp.val} date={temp.date}></RecordItem>])\n  }\n  setRecords(temp1)\n}\n\nexport default () => {\n  const [type, setType] = useState(\"\");\n  const [val, setVal] = useState(\"\");\n  const [modalVisible, setModalVisible] = useState(false);\n  const [records, setRecords] = useState([]);\n  return (\n    <View onLayout={() => reloadRecords(records, setRecords)} style={{ flex:1,flexDirection: 'column' }}>\n      <ScrollView style={{ flex: 1 }}>\n        {records}\n        <Modal\n          animationType=\"slide\"\n          transparent={true}\n          visible={modalVisible}\n        >\n          <View style={styles.centeredView}>\n            <View style={styles.modalView} >\n              <Picker style={{ width: 250 }} onValueChange={(itemValue, itemIndex) => setType(itemValue)}>\n                <Picker.Item value=\"Choose Record Type\" label=\"Choose Record Type\" />\n                <Picker.Item label=\"Glucoge Level\" value=\"Glucoge Level\" />\n                <Picker.Item label=\"Blood Pressure\" value=\"Blood Pressure\" />\n                <Picker.Item label=\"Temperature\" value=\"Temperature\" />\n              </Picker>\n              <TextInput style={{ borderWidth: 2, width: 200 }} onChangeText={(value) => setVal(value)}>\n              </TextInput>\n              <View style={{ flexDirection: 'row' }}>\n                <Pressable\n\n                  style={[styles.button, styles.buttonClose]}\n                  onPress={async () => {\n                    await donePressed(type, val)\n                    reloadRecords(records, setRecords)\n                    setModalVisible(!modalVisible)\n                  }}\n                >\n                  <Text style={styles.textStyle}>Done</Text>\n                </Pressable>\n                <Pressable\n\n                  style={[styles.button, styles.buttonClose]}\n                  onPress={() => { setModalVisible(!modalVisible) }}\n                >\n                  <Text style={styles.textStyle}>Cancel</Text>\n                </Pressable>\n              </View>\n            </View>\n          </View>\n        </Modal>\n      </ScrollView>\n      <Button title={\"Add New Record\"} onPress={() => setModalVisible(true)}>\n      </Button>\n    </View>\n  )\n\n}\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2,\n    marginTop: 5,\n    marginLeft: 15\n  },\n  buttonOpen: {\n    backgroundColor: \"#F194FF\",\n  },\n  buttonClose: {\n    backgroundColor: \"#2196F3\",\n  },\n  textStyle: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: \"center\"\n  }\n});"]},"metadata":{},"sourceType":"module"}