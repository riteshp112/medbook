{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport PostItem from \"../Components/PostItem\";\nimport { fetchURL } from \"../config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ObjectId(str) {\n  return str;\n}\n\nfunction homegen() {}\n\nvar isCloseToBottom = function isCloseToBottom(_ref) {\n  var layoutMeasurement = _ref.layoutMeasurement,\n      contentOffset = _ref.contentOffset,\n      contentSize = _ref.contentSize;\n  var paddingToBottom = 20;\n  return layoutMeasurement.height + contentOffset.y >= contentSize.height - 50;\n};\n\nvar loadPost = function loadPost(setPostItems, setModalVisible, PostItems) {\n  fetch(fetchURL, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      type: 'select',\n      table: 'post',\n      condition: {},\n      limit: 5\n    })\n  }).then(function (response) {\n    var a = response.headers.map.output;\n    a = a.replace(/\\'/g, '\"');\n    a = JSON.parse(a);\n    var len = Object.keys(a).length;\n    var psts = [];\n\n    for (var i = 0; i < len; i++) {\n      psts.push([_jsx(PostItem, {\n        use: a[i].use,\n        post: a[i].post\n      }, i)]);\n    }\n\n    setPostItems(psts);\n    setModalVisible(false);\n  }, function (err) {\n    console.debug('Something went wrong', err);\n  }).catch(function (error) {\n    console.debug(\"Something went wrong\", error);\n    return error;\n  });\n};\n\nexport default Post = function Post() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      PostItems = _useState2[0],\n      setPostItems = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var loadPost = function loadPost() {\n    fetch(fetchURL, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        type: 'select',\n        table: 'post',\n        condition: {},\n        limit: \"\" + PostItems.length + 5\n      })\n    }).then(function (response) {\n      var a = response.headers.map.output;\n      a = a.replace(/\\'/g, '\"');\n      a = a.split(\"},\");\n      var len = Object.keys(a).length;\n      var psts = [];\n      if (len > PostItems.length) for (var i = 0; i < len; i++) {\n        item = a[i];\n        if (i !== len - 1) item += '}';\n        item = JSON.parse(item);\n        psts.push([_jsx(PostItem, {\n          item: item\n        }, i)]);\n      }\n      if (len > PostItems.length) setPostItems(psts);\n      setModalVisible(false);\n    }, function (err) {\n      console.debug('Something went wrong', err);\n    }).catch(function (error) {\n      console.debug(\"Something went wrong\", error);\n      return error;\n    });\n  };\n\n  if (PostItems.length == 0) loadPost(setPostItems, setModalVisible, PostItems);\n  return _jsxs(ScrollView, {\n    onScroll: function onScroll(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (isCloseToBottom(nativeEvent)) {\n        loadPost(setPostItems, setModalVisible, PostItems);\n      }\n    },\n    children: [PostItems, _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      style: {\n        position: \"absolute\"\n      },\n      children: _jsx(Text, {\n        style: {\n          margin: 20,\n          backgroundColor: \"white\",\n          borderRadius: 20,\n          padding: 35,\n          top: 200,\n          color: 'blue',\n          textAlign: 'center',\n          alignItems: \"center\",\n          shadowColor: \"#000\",\n          fontSize: 45,\n          shadowOffset: {\n            width: 0,\n            height: 2\n          }\n        },\n        children: \" Loading\"\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/home/ritesh/medbook/medbook-client/medbook2/medbook/src/Screens/Post.js"],"names":["useState","PostItem","fetchURL","ObjectId","str","homegen","isCloseToBottom","layoutMeasurement","contentOffset","contentSize","paddingToBottom","height","y","loadPost","setPostItems","setModalVisible","PostItems","fetch","method","headers","Accept","body","JSON","stringify","type","table","condition","limit","then","response","a","map","output","replace","parse","len","Object","keys","length","psts","i","push","use","post","err","console","debug","catch","error","Post","modalVisible","split","item","nativeEvent","position","margin","backgroundColor","borderRadius","padding","top","color","textAlign","alignItems","shadowColor","fontSize","shadowOffset","width"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { View, Modal, Text } from \"react-native\"\nimport { ScrollView } from \"react-native\";\n//import PostItem from \"./PostItem\"\nimport PostItem from \"../Components/PostItem\";\nimport { fetchURL } from \"../config\";\nfunction ObjectId(str) {\n  return str;\n}\nfunction homegen() {\n\n\n}\nconst isCloseToBottom = ({ layoutMeasurement, contentOffset, contentSize }) => {\n  const paddingToBottom = 20;\n  return layoutMeasurement.height + contentOffset.y >=\n    contentSize.height - 50;\n};\n\nconst loadPost = (setPostItems, setModalVisible, PostItems) => {\n  fetch(fetchURL, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({type:'select',table:'post',condition:{},limit:5})\n  }).then((response) => {\n    var a = response.headers.map.output\n    a = a.replace(/\\'/g, '\"')\n    // alert(a)\n    a = JSON.parse(a)\n    var len = Object.keys(a).length\n    //var st=len;\n    var psts = []\n    for (var i = 0; i < len; i++)\n      psts.push([<PostItem key={i} use={a[i].use} post={a[i].post}></PostItem>])\n    setPostItems(psts)\n    setModalVisible(false)\n  }, (err) => {\n    console.debug('Something went wrong', err)\n  })\n    .catch((error) => {\n      console.debug(\"Something went wrong\", error);\n      return error;\n    });\n}\nexport default Post = () => {\n  const [PostItems, setPostItems] = useState([])\n  const [modalVisible, setModalVisible] = useState(true);\n  const loadPost = () => {\n    fetch(fetchURL, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({type:'select',table:'post',condition:{} ,limit: \"\" + PostItems.length+5})\n    }).then((response) => {\n      // alert(JSON.stringify(response))\n      var a = response.headers.map.output\n      \n      a = a.replace(/\\'/g, '\"')\n      a=a.split(\"},\")\n      // alert(a[2])\n      // a = JSON.parse(a)\n      var len = Object.keys(a).length\n      //var st=len;\n      var psts = []\n      if (len > PostItems.length)\n        for (var i = 0; i < len; i++)\n{         item=a[i]\n            if (i!==len-1)\n            item+='}'\n          // alert(item)\n          item=JSON.parse(item)\n          psts.push([<PostItem key={i} item={item}></PostItem>])\n}      if (len > PostItems.length)\n        setPostItems(psts)\n      setModalVisible(false)\n    }, (err) => {\n      console.debug('Something went wrong', err)\n    })\n      .catch((error) => {\n        console.debug(\"Something went wrong\", error);\n        return error;\n      });\n  }\n  if (PostItems.length == 0)\n    loadPost(setPostItems, setModalVisible, PostItems);\n  return (\n    <ScrollView onScroll={({ nativeEvent }) => {\n      if (isCloseToBottom(nativeEvent)) {\n        loadPost(setPostItems, setModalVisible, PostItems)\n        //setModalVisible(!modalVisible)\n      }\n    }}>\n      {PostItems}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        style={{ position: \"absolute\" }}\n      >\n        <Text style={{\n          margin: 20,\n          backgroundColor: \"white\",\n          borderRadius: 20,\n          padding: 35,\n          top: 200,\n          color: 'blue',\n          textAlign: 'center',\n          alignItems: \"center\",\n          shadowColor: \"#000\",\n          fontSize: 45,\n          shadowOffset: {\n            width: 0,\n            height: 2\n          }\n        }}> Loading</Text>\n      </Modal>\n    </ScrollView>\n\n  )\n}"]},"metadata":{},"sourceType":"module"}